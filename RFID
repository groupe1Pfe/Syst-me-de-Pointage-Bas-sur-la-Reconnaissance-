//librairies

#include <ArduinoJson.h>

#include <ESP8266WiFi.h>

#include <WiFiClient.h>

#include <SPI.h>

#include <MFRC522.h>

#include <Servo.h>

// Pin assignment

#define SS_PIN D4

#define RST_PIN D3

 

const char* ssid = " "; // your ssid example: AndroidAP

const char* password = " "; // your password example: 12345

 

WiFiClient client;            // Use this for WiFi instead of EthernetClient

WiFiServer server(80);

 

const char* host     = "192.168.43.2";  // IP address of your Host

char user[] = "  ";        // MySQL user login username

char pass[] = "  ";        // MySQL user login password

 

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.

Servo monServomoteur;   // Create a servo object

 

String path= "/projects/light.json"; // json file containing the data collected from the data base

 

void setup()

{

  Serial.begin(115200);   // Initiate a serial communication

  SPI.begin();      // Initiate  SPI bus

  mfrc522.PCD_Init();   // Initiate MFRC522

  monServomoteur.attach(D2);

  Serial.println();

  WiFi.mode(WIFI_STA);

 Serial.println();

 Serial.print("Connecting to ");

 Serial.println(ssid);

 WiFi.begin(ssid, password);

 while (WiFi.status() != WL_CONNECTED) {

   delay(500);

   Serial.print(".");

  }

 Serial.println("");

 Serial.println("WiFi connected");

 server.begin();

 Serial.println("Server started");

 Serial.println(WiFi.localIP());

}

 

void loop()

{

  // Look for new cards

  if ( ! mfrc522.PICC_IsNewCardPresent())

  {

     return;

  }

  // Select one of the cards

  if ( ! mfrc522.PICC_ReadCardSerial())

  {

    return;

  }

  //Show UID on serial monitor

  Serial.print("UID tag :");

  String content= "";

  byte letter

 

  for (byte i = 0; i < mfrc522.uid.size; i++)

  {

      Serial.print(mfrc522.uid.uidByte[i] );

     content.concat(mfrc522.uid.uidByte[i] );

  }

  Serial.println();

 

   String data = "NCard=";

   data += content;

 

  if(client.connect(host,80)) {

     client.println("GET /projects/verification.php?"+ data +" HTTP/1.1");

     client.println("Host: 192.168.43.2" );

     client.println("Connection: close");

     client.println();

     delay(2000);   

   }

 

 if(client.connect(host,80)) {

     client.print(String("GET ") + path + " HTTP/1.1\r\n" + "Host: " + host  

              + "\r\n" + "Connection: keep-alive\r\n\r\n");

     delay(500);

     String section="header";

     while(client.available()){

     String line = client.readStringUntil('\r');

     if (section=="header") { // headers..

       Serial.print(".");

      if (line=="\n") { // skips the empty space at the beginning

         section="json";

      }

    }

     else if (section=="json") {  // print the good stuff

      section="ignore";

      String result = line.substring(1);      // Parse JSON

      int size = result.length() + 1;

      char json[size];

      result.toCharArray(json, size);

      StaticJsonBuffer<200> jsonBuffer;

      JsonObject& json_parsed = jsonBuffer.parseObject(json);

      if (!json_parsed.success())

      {

        Serial.println("parseObject() failed");

        return;

      }

 

      if (strcmp(json_parsed["statut"], "1") == 0) {

       

         monServomoteur.write(0);

          delay(1000);

        monServomoteur.write(90);

      }    

    }

  }  }}
